type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
}

type DolomiteMargin @entity {
  # contract address
  id: ID!

  numberOfMarkets: Int!

  # risk params
  liquidationRatio: BigDecimal!
  liquidationReward: BigDecimal!
  earningsRate: BigDecimal!
  minBorrowedValue: BigDecimal!
}

type MarketRiskInfo @entity {
  id: ID! # Defined as marketId
  token: Token!
  marginPremium: BigDecimal!
  liquidationRewardPremium: BigDecimal!
  isBorrowingDisabled: Boolean!
}

type MarginAccount @entity {
  id: ID! # Defined as "userAddress-accountNumber"
  user: Bytes!
  accountNumber: BigInt!
  lastUpdatedTimestamp: BigInt! # Timestamp at which any token value was last updated
  lastUpdatedBlockNumber: BigInt!
  tokenValues: [MarginAccountTokenValue!]! @derivedFrom(field: "marginAccount")
  borrowedMarketIds: [MarginAccountTokenValue!]!
  expirationMarketIds: [MarginAccountTokenValue!]!
  hasBorrowedValue: Boolean!
  hasExpiration: Boolean!
}

type MarginAccountTokenValue @entity {
  id: ID! # Defined as "user-accountNumber-marketId"
  marginAccount: MarginAccount!
  marketId: BigInt!
  token: Token!
  valuePar: BigDecimal! # Par value of the user's held token. Can be negative, meaning it's borrowed funds.
  expirationTimestamp: BigInt
  expiryAddress: Bytes
  lastUpdateTransaction: Transaction!
  allUpdateTransactions: [Transaction!]!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # Taken from dYdX
  marketId: BigInt!
}
